{"version":3,"sources":["../node_modules/shallowequal/index.js","../node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js"],"names":["module","exports","objA","objB","compare","compareContext","ret","call","keysA","Object","keys","keysB","length","bHasOwnProperty","prototype","hasOwnProperty","bind","idx","key","valueA","valueB","global","MapShim","Map","getIndex","arr","result","some","entry","index","class_1","this","__entries__","defineProperty","get","enumerable","configurable","set","value","push","delete","entries","splice","has","clear","forEach","callback","ctx","_i","_a","isBrowser","window","document","global$1","Math","self","Function","requestAnimationFrame$1","requestAnimationFrame","setTimeout","Date","now","trailingTimeout","REFRESH_DELAY","transitionKeys","mutationObserverSupported","MutationObserver","ResizeObserverController","connected_","mutationEventsAdded_","mutationsObserver_","observers_","onTransitionEnd_","refresh","delay","leadingCall","trailingCall","lastCallTime","resolvePending","proxy","timeoutCallback","timeStamp","throttle","addObserver","observer","indexOf","connect_","removeObserver","observers","disconnect_","updateObservers_","activeObservers","filter","gatherActive","hasActive","broadcastActive","addEventListener","observe","attributes","childList","characterData","subtree","removeEventListener","disconnect","_b","propertyName","getInstance","instance_","defineConfigurable","target","props","writable","getWindowOf","ownerDocument","defaultView","emptyRect","createRectInit","toFloat","parseFloat","getBordersSize","styles","positions","arguments","reduce","size","position","getHTMLElementContentRect","clientWidth","clientHeight","getComputedStyle","paddings","positions_1","getPaddings","horizPad","left","right","vertPad","top","bottom","width","height","boxSizing","round","documentElement","isDocumentElement","vertScrollbar","horizScrollbar","abs","isSVGGraphicsElement","SVGGraphicsElement","SVGElement","getBBox","getContentRect","bbox","getSVGContentRect","x","y","ResizeObservation","broadcastWidth","broadcastHeight","contentRect_","isActive","rect","broadcastRect","ResizeObserverEntry","rectInit","contentRect","Constr","DOMRectReadOnly","create","createReadOnlyRect","ResizeObserverSPI","controller","callbackCtx","activeObservations_","observations_","TypeError","callback_","controller_","callbackCtx_","Element","observations","unobserve","clearActive","_this","observation","map","WeakMap","ResizeObserver","method","apply","__webpack_exports__"],"mappings":"2EACAA,EAAAC,QAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAF,IAAAG,KAAAF,EAAAH,EAAAC,QAAA,EAEA,YAAAG,EACA,QAAAA,EAGA,GAAAJ,IAAAC,EACA,SAGA,qBAAAD,OAAA,kBAAAC,MACA,SAGA,IAAAK,EAAAC,OAAAC,KAAAR,GACAS,EAAAF,OAAAC,KAAAP,GAEA,GAAAK,EAAAI,SAAAD,EAAAC,OACA,SAKA,IAFA,IAAAC,EAAAJ,OAAAK,UAAAC,eAAAC,KAAAb,GAEAc,EAAA,EAAmBA,EAAAT,EAAAI,OAAoBK,IAAA,CACvC,IAAAC,EAAAV,EAAAS,GAEA,IAAAJ,EAAAK,GACA,SAGA,IAAAC,EAAAjB,EAAAgB,GACAE,EAAAjB,EAAAe,GAGA,SAFAZ,EAAAF,IAAAG,KAAAF,EAAAc,EAAAC,EAAAF,QAAA,SAEA,IAAAZ,GAAAa,IAAAC,EACA,SAIA,6CCzCA,SAAAC,GAQA,IAAAC,EAAA,WACA,wBAAAC,IACA,OAAAA,IAWA,SAAAC,EAAAC,EAAAP,GACA,IAAAQ,GAAA,EASA,OARAD,EAAAE,KAAA,SAAAC,EAAAC,GACA,OAAAD,EAAA,KAAAV,IACAQ,EAAAG,GACA,KAKAH,EAGA,OAEA,WACA,SAAAI,IACAC,KAAAC,YAAA,GAwFA,OArFAvB,OAAAwB,eAAAH,EAAAhB,UAAA,QAIAoB,IAAA,WACA,OAAAH,KAAAC,YAAApB,QAEAuB,YAAA,EACAC,cAAA,IAOAN,EAAAhB,UAAAoB,IAAA,SAAAhB,GACA,IAAAW,EAAAL,EAAAO,KAAAC,YAAAd,GACAU,EAAAG,KAAAC,YAAAH,GACA,OAAAD,KAAA,IASAE,EAAAhB,UAAAuB,IAAA,SAAAnB,EAAAoB,GACA,IAAAT,EAAAL,EAAAO,KAAAC,YAAAd,IAEAW,EACAE,KAAAC,YAAAH,GAAA,GAAAS,EAEAP,KAAAC,YAAAO,KAAA,CAAArB,EAAAoB,KASAR,EAAAhB,UAAA0B,OAAA,SAAAtB,GACA,IAAAuB,EAAAV,KAAAC,YACAH,EAAAL,EAAAiB,EAAAvB,IAEAW,GACAY,EAAAC,OAAAb,EAAA,IASAC,EAAAhB,UAAA6B,IAAA,SAAAzB,GACA,SAAAM,EAAAO,KAAAC,YAAAd,IAOAY,EAAAhB,UAAA8B,MAAA,WACAb,KAAAC,YAAAU,OAAA,IASAZ,EAAAhB,UAAA+B,QAAA,SAAAC,EAAAC,QACA,IAAAA,IACAA,EAAA,MAGA,QAAAC,EAAA,EAAAC,EAAAlB,KAAAC,YAA+CgB,EAAAC,EAAArC,OAAgBoC,IAAA,CAC/D,IAAApB,EAAAqB,EAAAD,GACAF,EAAAvC,KAAAwC,EAAAnB,EAAA,GAAAA,EAAA,MAIAE,EA5FA,GA1BA,GA+HAoB,EAAA,qBAAAC,QAAA,qBAAAC,UAAAD,OAAAC,oBAEAC,EACA,qBAAAhC,KAAAiC,YACAjC,EAGA,qBAAAkC,WAAAD,YACAC,KAGA,qBAAAJ,eAAAG,YACAH,OAIAK,SAAA,cAAAA,GAUAC,EACA,oBAAAC,sBAIAA,sBAAA1C,KAAAqC,GAGA,SAAAP,GACA,OAAAa,WAAA,WACA,OAAAb,EAAAc,KAAAC,QACK,SAKLC,EAAA,EA6EA,IAAAC,EAAA,GAGAC,EAAA,iEAEAC,EAAA,qBAAAC,iBAKAC,EAEA,WAMA,SAAAA,IAMApC,KAAAqC,YAAA,EAOArC,KAAAsC,sBAAA,EAOAtC,KAAAuC,mBAAA,KAOAvC,KAAAwC,WAAA,GACAxC,KAAAyC,iBAAAzC,KAAAyC,iBAAAxD,KAAAe,MACAA,KAAA0C,QAlHA,SAAA3B,EAAA4B,GACA,IAAAC,GAAA,EACAC,GAAA,EACAC,EAAA,EAQA,SAAAC,IACAH,IACAA,GAAA,EACA7B,KAGA8B,GACAG,IAYA,SAAAC,IACAvB,EAAAqB,GASA,SAAAC,IACA,IAAAE,EAAArB,KAAAC,MAEA,GAAAc,EAAA,CAEA,GAAAM,EAAAJ,EAAAf,EACA,OAOAc,GAAA,OAEAD,GAAA,EACAC,GAAA,EACAjB,WAAAqB,EAAAN,GAGAG,EAAAI,EAGA,OAAAF,EAmDAG,CAAAnD,KAAA0C,QAAAzD,KAAAe,MAAAgC,GA+LA,OArLAI,EAAArD,UAAAqE,YAAA,SAAAC,IACArD,KAAAwC,WAAAc,QAAAD,IACArD,KAAAwC,WAAAhC,KAAA6C,GAIArD,KAAAqC,YACArC,KAAAuD,YAWAnB,EAAArD,UAAAyE,eAAA,SAAAH,GACA,IAAAI,EAAAzD,KAAAwC,WACA1C,EAAA2D,EAAAH,QAAAD,IAEAvD,GACA2D,EAAA9C,OAAAb,EAAA,IAIA2D,EAAA5E,QAAAmB,KAAAqC,YACArC,KAAA0D,eAWAtB,EAAArD,UAAA2D,QAAA,WACA1C,KAAA2D,oBAIA3D,KAAA0C,WAaAN,EAAArD,UAAA4E,iBAAA,WAEA,IAAAC,EAAA5D,KAAAwC,WAAAqB,OAAA,SAAAR,GACA,OAAAA,EAAAS,eAAAT,EAAAU,cAUA,OAHAH,EAAA9C,QAAA,SAAAuC,GACA,OAAAA,EAAAW,oBAEAJ,EAAA/E,OAAA,GAUAuD,EAAArD,UAAAwE,SAAA,WAGApC,IAAAnB,KAAAqC,aAOAhB,SAAA4C,iBAAA,gBAAAjE,KAAAyC,kBACArB,OAAA6C,iBAAA,SAAAjE,KAAA0C,SAEAR,GACAlC,KAAAuC,mBAAA,IAAAJ,iBAAAnC,KAAA0C,SACA1C,KAAAuC,mBAAA2B,QAAA7C,SAAA,CACA8C,YAAA,EACAC,WAAA,EACAC,eAAA,EACAC,SAAA,MAGAjD,SAAA4C,iBAAA,qBAAAjE,KAAA0C,SACA1C,KAAAsC,sBAAA,GAGAtC,KAAAqC,YAAA,IAUAD,EAAArD,UAAA2E,YAAA,WAGAvC,GAAAnB,KAAAqC,aAIAhB,SAAAkD,oBAAA,gBAAAvE,KAAAyC,kBACArB,OAAAmD,oBAAA,SAAAvE,KAAA0C,SAEA1C,KAAAuC,oBACAvC,KAAAuC,mBAAAiC,aAGAxE,KAAAsC,sBACAjB,SAAAkD,oBAAA,qBAAAvE,KAAA0C,SAGA1C,KAAAuC,mBAAA,KACAvC,KAAAsC,sBAAA,EACAtC,KAAAqC,YAAA,IAWAD,EAAArD,UAAA0D,iBAAA,SAAAvB,GACA,IAAAuD,EAAAvD,EAAAwD,aACAA,OAAA,IAAAD,EAAA,GAAAA,EAEAxC,EAAArC,KAAA,SAAAT,GACA,SAAAuF,EAAApB,QAAAnE,MAIAa,KAAA0C,WAUAN,EAAAuC,YAAA,WAKA,OAJA3E,KAAA4E,YACA5E,KAAA4E,UAAA,IAAAxC,GAGApC,KAAA4E,WASAxC,EAAAwC,UAAA,KACAxC,EAlOA,GA6OAyC,EAAA,SAAAC,EAAAC,GACA,QAAA9D,EAAA,EAAAC,EAAAxC,OAAAC,KAAAoG,GAA2C9D,EAAAC,EAAArC,OAAgBoC,IAAA,CAC3D,IAAA9B,EAAA+B,EAAAD,GACAvC,OAAAwB,eAAA4E,EAAA3F,EAAA,CACAoB,MAAAwE,EAAA5F,GACAiB,YAAA,EACA4E,UAAA,EACA3E,cAAA,IAIA,OAAAyE,GAUAG,EAAA,SAAAH,GAOA,OAHAA,KAAAI,eAAAJ,EAAAI,cAAAC,aAGA7D,GAIA8D,EAAAC,EAAA,SAQA,SAAAC,EAAA/E,GACA,OAAAgF,WAAAhF,IAAA,EAWA,SAAAiF,EAAAC,GAGA,IAFA,IAAAC,EAAA,GAEAzE,EAAA,EAAkBA,EAAA0E,UAAA9G,OAAuBoC,IACzCyE,EAAAzE,EAAA,GAAA0E,UAAA1E,GAGA,OAAAyE,EAAAE,OAAA,SAAAC,EAAAC,GAEA,OAAAD,EAAAP,EADAG,EAAA,UAAAK,EAAA,YAEG,GA2CH,SAAAC,EAAAjB,GAGA,IAAAkB,EAAAlB,EAAAkB,YACAC,EAAAnB,EAAAmB,aASA,IAAAD,IAAAC,EACA,OAAAb,EAGA,IAAAK,EAAAR,EAAAH,GAAAoB,iBAAApB,GACAqB,EAnDA,SAAAV,GAIA,IAHA,IACAU,EAAA,GAEAlF,EAAA,EAAAmF,EAHA,gCAG2CnF,EAAAmF,EAAAvH,OAAyBoC,IAAA,CACpE,IAAA6E,EAAAM,EAAAnF,GACAV,EAAAkF,EAAA,WAAAK,GACAK,EAAAL,GAAAR,EAAA/E,GAGA,OAAA4F,EAyCAE,CAAAZ,GACAa,EAAAH,EAAAI,KAAAJ,EAAAK,MACAC,EAAAN,EAAAO,IAAAP,EAAAQ,OAKAC,EAAAtB,EAAAG,EAAAmB,OACAC,EAAAvB,EAAAG,EAAAoB,QAuBA,GApBA,eAAApB,EAAAqB,YAOAvF,KAAAwF,MAAAH,EAAAN,KAAAN,IACAY,GAAApB,EAAAC,EAAA,gBAAAa,GAGA/E,KAAAwF,MAAAF,EAAAJ,KAAAR,IACAY,GAAArB,EAAAC,EAAA,gBAAAgB,KA+DA,SAAA3B,GACA,OAAAA,IAAAG,EAAAH,GAAAzD,SAAA2F,gBAxDAC,CAAAnC,GAAA,CAKA,IAAAoC,EAAA3F,KAAAwF,MAAAH,EAAAN,GAAAN,EACAmB,EAAA5F,KAAAwF,MAAAF,EAAAJ,GAAAR,EAMA,IAAA1E,KAAA6F,IAAAF,KACAN,GAAAM,GAGA,IAAA3F,KAAA6F,IAAAD,KACAN,GAAAM,GAIA,OAAA9B,EAAAc,EAAAI,KAAAJ,EAAAO,IAAAE,EAAAC,GAUA,IAAAQ,EAGA,qBAAAC,mBACA,SAAAxC,GACA,OAAAA,aAAAG,EAAAH,GAAAwC,oBAOA,SAAAxC,GACA,OAAAA,aAAAG,EAAAH,GAAAyC,YAAA,oBAAAzC,EAAA0C,SAsBA,SAAAC,EAAA3C,GACA,OAAA3D,EAIAkG,EAAAvC,GApIA,SAAAA,GACA,IAAA4C,EAAA5C,EAAA0C,UACA,OAAAnC,EAAA,IAAAqC,EAAAd,MAAAc,EAAAb,QAmIAc,CAAA7C,GAGAiB,EAAAjB,GAPAM,EAmDA,SAAAC,EAAAuC,EAAAC,EAAAjB,EAAAC,GACA,OACAe,IACAC,IACAjB,QACAC,UASA,IAAAiB,EAEA,WAMA,SAAAA,EAAAhD,GAMA9E,KAAA+H,eAAA,EAOA/H,KAAAgI,gBAAA,EAOAhI,KAAAiI,aAAA5C,EAAA,SACArF,KAAA8E,SA8BA,OApBAgD,EAAA/I,UAAAmJ,SAAA,WACA,IAAAC,EAAAV,EAAAzH,KAAA8E,QAEA,OADA9E,KAAAiI,aAAAE,EACAA,EAAAvB,QAAA5G,KAAA+H,gBAAAI,EAAAtB,SAAA7G,KAAAgI,iBAUAF,EAAA/I,UAAAqJ,cAAA,WACA,IAAAD,EAAAnI,KAAAiI,aAGA,OAFAjI,KAAA+H,eAAAI,EAAAvB,MACA5G,KAAAgI,gBAAAG,EAAAtB,OACAsB,GAGAL,EAzDA,GA4DAO,EAEA,WAqBA,OAdA,SAAAvD,EAAAwD,GACA,IAAAC,EAvHA,SAAArH,GACA,IAAA0G,EAAA1G,EAAA0G,EACAC,EAAA3G,EAAA2G,EACAjB,EAAA1F,EAAA0F,MACAC,EAAA3F,EAAA2F,OAEA2B,EAAA,qBAAAC,gCAAA/J,OACAyJ,EAAAzJ,OAAAgK,OAAAF,EAAAzJ,WAYA,OAVA8F,EAAAsD,EAAA,CACAP,IACAC,IACAjB,QACAC,SACAH,IAAAmB,EACArB,MAAAoB,EAAAhB,EACAD,OAAAE,EAAAgB,EACAtB,KAAAqB,IAEAO,EAoGAQ,CAAAL,GAOAzD,EAAA7E,KAAA,CACA8E,SACAyD,iBAjBA,GAwBAK,EAEA,WAWA,SAAAA,EAAA7H,EAAA8H,EAAAC,GAgBA,GATA9I,KAAA+I,oBAAA,GAOA/I,KAAAgJ,cAAA,IAAAzJ,EAEA,oBAAAwB,EACA,UAAAkI,UAAA,2DAGAjJ,KAAAkJ,UAAAnI,EACAf,KAAAmJ,YAAAN,EACA7I,KAAAoJ,aAAAN,EA8IA,OApIAF,EAAA7J,UAAAmF,QAAA,SAAAY,GACA,IAAAa,UAAA9G,OACA,UAAAoK,UAAA,4CAIA,wBAAAI,4BAAA3K,OAAA,CAIA,KAAAoG,aAAAG,EAAAH,GAAAuE,SACA,UAAAJ,UAAA,yCAGA,IAAAK,EAAAtJ,KAAAgJ,cAEAM,EAAA1I,IAAAkE,KAIAwE,EAAAhJ,IAAAwE,EAAA,IAAAgD,EAAAhD,IACA9E,KAAAmJ,YAAA/F,YAAApD,MAEAA,KAAAmJ,YAAAzG,aAUAkG,EAAA7J,UAAAwK,UAAA,SAAAzE,GACA,IAAAa,UAAA9G,OACA,UAAAoK,UAAA,4CAIA,wBAAAI,4BAAA3K,OAAA,CAIA,KAAAoG,aAAAG,EAAAH,GAAAuE,SACA,UAAAJ,UAAA,yCAGA,IAAAK,EAAAtJ,KAAAgJ,cAEAM,EAAA1I,IAAAkE,KAIAwE,EAAA7I,OAAAqE,GAEAwE,EAAAzD,MACA7F,KAAAmJ,YAAA3F,eAAAxD,SAUA4I,EAAA7J,UAAAyF,WAAA,WACAxE,KAAAwJ,cACAxJ,KAAAgJ,cAAAnI,QACAb,KAAAmJ,YAAA3F,eAAAxD,OAUA4I,EAAA7J,UAAA+E,aAAA,WACA,IAAA2F,EAAAzJ,KAEAA,KAAAwJ,cACAxJ,KAAAgJ,cAAAlI,QAAA,SAAA4I,GACAA,EAAAxB,YACAuB,EAAAV,oBAAAvI,KAAAkJ,MAYAd,EAAA7J,UAAAiF,gBAAA,WAEA,GAAAhE,KAAA+D,YAAA,CAIA,IAAA/C,EAAAhB,KAAAoJ,aAEA1I,EAAAV,KAAA+I,oBAAAY,IAAA,SAAAD,GACA,WAAArB,EAAAqB,EAAA5E,OAAA4E,EAAAtB,mBAEApI,KAAAkJ,UAAA1K,KAAAwC,EAAAN,EAAAM,GACAhB,KAAAwJ,gBASAZ,EAAA7J,UAAAyK,YAAA,WACAxJ,KAAA+I,oBAAApI,OAAA,IASAiI,EAAA7J,UAAAgF,UAAA,WACA,OAAA/D,KAAA+I,oBAAAlK,OAAA,GAGA+J,EA/KA,GAqLAnF,EAAA,qBAAAmG,QAAA,IAAAA,QAAA,IAAArK,EAMAsK,EAEA,WAqBA,OAdA,SAAAA,EAAA9I,GACA,KAAAf,gBAAA6J,GACA,UAAAZ,UAAA,sCAGA,IAAAtD,UAAA9G,OACA,UAAAoK,UAAA,4CAGA,IAAAJ,EAAAzG,EAAAuC,cACAtB,EAAA,IAAAuF,EAAA7H,EAAA8H,EAAA7I,MACAyD,EAAAnD,IAAAN,KAAAqD,IAlBA,GAyBA,qCAAAvC,QAAA,SAAAgJ,GACAD,EAAA9K,UAAA+K,GAAA,WACA,IAAA5I,EAEA,OAAAA,EAAAuC,EAAAtD,IAAAH,OAAA8J,GAAAC,MAAA7I,EAAAyE,cAIA,IAAA7F,EAEA,qBAAAwB,EAAAuI,eACAvI,EAAAuI,eAGAA,EAGeG,EAAA","file":"static/js/2.6b35822c.chunk.js","sourcesContent":["//\nmodule.exports = function shallowEqual(objA, objB, compare, compareContext) {\n  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;\n\n  if (ret !== void 0) {\n    return !!ret;\n  }\n\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== \"object\" || !objA || typeof objB !== \"object\" || !objB) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB); // Test for A's keys different from B.\n\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n\n    if (!bHasOwnProperty(key)) {\n      return false;\n    }\n\n    var valueA = objA[key];\n    var valueB = objB[key];\n    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;\n\n    if (ret === false || ret === void 0 && valueA !== valueB) {\n      return false;\n    }\n  }\n\n  return true;\n};","/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\n\n/* eslint-disable require-jsdoc, valid-jsdoc */\nvar MapShim = function () {\n  if (typeof Map !== 'undefined') {\n    return Map;\n  }\n  /**\r\n   * Returns index in provided array that matches the specified key.\r\n   *\r\n   * @param {Array<Array>} arr\r\n   * @param {*} key\r\n   * @returns {number}\r\n   */\n\n\n  function getIndex(arr, key) {\n    var result = -1;\n    arr.some(function (entry, index) {\n      if (entry[0] === key) {\n        result = index;\n        return true;\n      }\n\n      return false;\n    });\n    return result;\n  }\n\n  return (\n    /** @class */\n    function () {\n      function class_1() {\n        this.__entries__ = [];\n      }\n\n      Object.defineProperty(class_1.prototype, \"size\", {\n        /**\r\n         * @returns {boolean}\r\n         */\n        get: function get() {\n          return this.__entries__.length;\n        },\n        enumerable: true,\n        configurable: true\n      });\n      /**\r\n       * @param {*} key\r\n       * @returns {*}\r\n       */\n\n      class_1.prototype.get = function (key) {\n        var index = getIndex(this.__entries__, key);\n        var entry = this.__entries__[index];\n        return entry && entry[1];\n      };\n      /**\r\n       * @param {*} key\r\n       * @param {*} value\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.set = function (key, value) {\n        var index = getIndex(this.__entries__, key);\n\n        if (~index) {\n          this.__entries__[index][1] = value;\n        } else {\n          this.__entries__.push([key, value]);\n        }\n      };\n      /**\r\n       * @param {*} key\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.delete = function (key) {\n        var entries = this.__entries__;\n        var index = getIndex(entries, key);\n\n        if (~index) {\n          entries.splice(index, 1);\n        }\n      };\n      /**\r\n       * @param {*} key\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.has = function (key) {\n        return !!~getIndex(this.__entries__, key);\n      };\n      /**\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.clear = function () {\n        this.__entries__.splice(0);\n      };\n      /**\r\n       * @param {Function} callback\r\n       * @param {*} [ctx=null]\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.forEach = function (callback, ctx) {\n        if (ctx === void 0) {\n          ctx = null;\n        }\n\n        for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\n          var entry = _a[_i];\n          callback.call(ctx, entry[1], entry[0]);\n        }\n      };\n\n      return class_1;\n    }()\n  );\n}();\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\n\n\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document; // Returns global object of a current environment.\n\nvar global$1 = function () {\n  if (typeof global !== 'undefined' && global.Math === Math) {\n    return global;\n  }\n\n  if (typeof self !== 'undefined' && self.Math === Math) {\n    return self;\n  }\n\n  if (typeof window !== 'undefined' && window.Math === Math) {\n    return window;\n  } // eslint-disable-next-line no-new-func\n\n\n  return Function('return this')();\n}();\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\n\n\nvar requestAnimationFrame$1 = function () {\n  if (typeof requestAnimationFrame === 'function') {\n    // It's required to use a bounded function because IE sometimes throws\n    // an \"Invalid calling object\" error if rAF is invoked without the global\n    // object on the left hand side.\n    return requestAnimationFrame.bind(global$1);\n  }\n\n  return function (callback) {\n    return setTimeout(function () {\n      return callback(Date.now());\n    }, 1000 / 60);\n  };\n}(); // Defines minimum timeout before adding a trailing call.\n\n\nvar trailingTimeout = 2;\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\n\nfunction throttle(callback, delay) {\n  var leadingCall = false,\n      trailingCall = false,\n      lastCallTime = 0;\n  /**\r\n   * Invokes the original callback function and schedules new invocation if\r\n   * the \"proxy\" was called during current request.\r\n   *\r\n   * @returns {void}\r\n   */\n\n  function resolvePending() {\n    if (leadingCall) {\n      leadingCall = false;\n      callback();\n    }\n\n    if (trailingCall) {\n      proxy();\n    }\n  }\n  /**\r\n   * Callback invoked after the specified delay. It will further postpone\r\n   * invocation of the original function delegating it to the\r\n   * requestAnimationFrame.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  function timeoutCallback() {\n    requestAnimationFrame$1(resolvePending);\n  }\n  /**\r\n   * Schedules invocation of the original function.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  function proxy() {\n    var timeStamp = Date.now();\n\n    if (leadingCall) {\n      // Reject immediately following calls.\n      if (timeStamp - lastCallTime < trailingTimeout) {\n        return;\n      } // Schedule new call to be in invoked when the pending one is resolved.\n      // This is important for \"transitions\" which never actually start\n      // immediately so there is a chance that we might miss one if change\n      // happens amids the pending invocation.\n\n\n      trailingCall = true;\n    } else {\n      leadingCall = true;\n      trailingCall = false;\n      setTimeout(timeoutCallback, delay);\n    }\n\n    lastCallTime = timeStamp;\n  }\n\n  return proxy;\n} // Minimum delay before invoking the update of observers.\n\n\nvar REFRESH_DELAY = 20; // A list of substrings of CSS properties used to find transition events that\n// might affect dimensions of observed elements.\n\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight']; // Check if MutationObserver is available.\n\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\n\nvar ResizeObserverController =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of ResizeObserverController.\r\n   *\r\n   * @private\r\n   */\n  function ResizeObserverController() {\n    /**\r\n     * Indicates whether DOM listeners have been added.\r\n     *\r\n     * @private {boolean}\r\n     */\n    this.connected_ = false;\n    /**\r\n     * Tells that controller has subscribed for Mutation Events.\r\n     *\r\n     * @private {boolean}\r\n     */\n\n    this.mutationEventsAdded_ = false;\n    /**\r\n     * Keeps reference to the instance of MutationObserver.\r\n     *\r\n     * @private {MutationObserver}\r\n     */\n\n    this.mutationsObserver_ = null;\n    /**\r\n     * A list of connected observers.\r\n     *\r\n     * @private {Array<ResizeObserverSPI>}\r\n     */\n\n    this.observers_ = [];\n    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\n    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\n  }\n  /**\r\n   * Adds observer to observers list.\r\n   *\r\n   * @param {ResizeObserverSPI} observer - Observer to be added.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.addObserver = function (observer) {\n    if (!~this.observers_.indexOf(observer)) {\n      this.observers_.push(observer);\n    } // Add listeners if they haven't been added yet.\n\n\n    if (!this.connected_) {\n      this.connect_();\n    }\n  };\n  /**\r\n   * Removes observer from observers list.\r\n   *\r\n   * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.removeObserver = function (observer) {\n    var observers = this.observers_;\n    var index = observers.indexOf(observer); // Remove observer if it's present in registry.\n\n    if (~index) {\n      observers.splice(index, 1);\n    } // Remove listeners if controller has no connected observers.\n\n\n    if (!observers.length && this.connected_) {\n      this.disconnect_();\n    }\n  };\n  /**\r\n   * Invokes the update of observers. It will continue running updates insofar\r\n   * it detects changes.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.refresh = function () {\n    var changesDetected = this.updateObservers_(); // Continue running updates if changes have been detected as there might\n    // be future ones caused by CSS transitions.\n\n    if (changesDetected) {\n      this.refresh();\n    }\n  };\n  /**\r\n   * Updates every observer from observers list and notifies them of queued\r\n   * entries.\r\n   *\r\n   * @private\r\n   * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n   *      dimensions of it's elements.\r\n   */\n\n\n  ResizeObserverController.prototype.updateObservers_ = function () {\n    // Collect observers that have active observations.\n    var activeObservers = this.observers_.filter(function (observer) {\n      return observer.gatherActive(), observer.hasActive();\n    }); // Deliver notifications in a separate cycle in order to avoid any\n    // collisions between observers, e.g. when multiple instances of\n    // ResizeObserver are tracking the same element and the callback of one\n    // of them changes content dimensions of the observed target. Sometimes\n    // this may result in notifications being blocked for the rest of observers.\n\n    activeObservers.forEach(function (observer) {\n      return observer.broadcastActive();\n    });\n    return activeObservers.length > 0;\n  };\n  /**\r\n   * Initializes DOM listeners.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.connect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already added.\n    if (!isBrowser || this.connected_) {\n      return;\n    } // Subscription to the \"Transitionend\" event is used as a workaround for\n    // delayed transitions. This way it's possible to capture at least the\n    // final state of an element.\n\n\n    document.addEventListener('transitionend', this.onTransitionEnd_);\n    window.addEventListener('resize', this.refresh);\n\n    if (mutationObserverSupported) {\n      this.mutationsObserver_ = new MutationObserver(this.refresh);\n      this.mutationsObserver_.observe(document, {\n        attributes: true,\n        childList: true,\n        characterData: true,\n        subtree: true\n      });\n    } else {\n      document.addEventListener('DOMSubtreeModified', this.refresh);\n      this.mutationEventsAdded_ = true;\n    }\n\n    this.connected_ = true;\n  };\n  /**\r\n   * Removes DOM listeners.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.disconnect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already removed.\n    if (!isBrowser || !this.connected_) {\n      return;\n    }\n\n    document.removeEventListener('transitionend', this.onTransitionEnd_);\n    window.removeEventListener('resize', this.refresh);\n\n    if (this.mutationsObserver_) {\n      this.mutationsObserver_.disconnect();\n    }\n\n    if (this.mutationEventsAdded_) {\n      document.removeEventListener('DOMSubtreeModified', this.refresh);\n    }\n\n    this.mutationsObserver_ = null;\n    this.mutationEventsAdded_ = false;\n    this.connected_ = false;\n  };\n  /**\r\n   * \"Transitionend\" event handler.\r\n   *\r\n   * @private\r\n   * @param {TransitionEvent} event\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\n    var _b = _a.propertyName,\n        propertyName = _b === void 0 ? '' : _b; // Detect whether transition may affect dimensions of an element.\n\n    var isReflowProperty = transitionKeys.some(function (key) {\n      return !!~propertyName.indexOf(key);\n    });\n\n    if (isReflowProperty) {\n      this.refresh();\n    }\n  };\n  /**\r\n   * Returns instance of the ResizeObserverController.\r\n   *\r\n   * @returns {ResizeObserverController}\r\n   */\n\n\n  ResizeObserverController.getInstance = function () {\n    if (!this.instance_) {\n      this.instance_ = new ResizeObserverController();\n    }\n\n    return this.instance_;\n  };\n  /**\r\n   * Holds reference to the controller's instance.\r\n   *\r\n   * @private {ResizeObserverController}\r\n   */\n\n\n  ResizeObserverController.instance_ = null;\n  return ResizeObserverController;\n}();\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\n\n\nvar defineConfigurable = function defineConfigurable(target, props) {\n  for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\n    var key = _a[_i];\n    Object.defineProperty(target, key, {\n      value: props[key],\n      enumerable: false,\n      writable: false,\n      configurable: true\n    });\n  }\n\n  return target;\n};\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\n\n\nvar getWindowOf = function getWindowOf(target) {\n  // Assume that the element is an instance of Node, which means that it\n  // has the \"ownerDocument\" property from which we can retrieve a\n  // corresponding global object.\n  var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView; // Return the local global object if it's not possible extract one from\n  // provided element.\n\n  return ownerGlobal || global$1;\n}; // Placeholder of an empty content rectangle.\n\n\nvar emptyRect = createRectInit(0, 0, 0, 0);\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\n\nfunction toFloat(value) {\n  return parseFloat(value) || 0;\n}\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\n\n\nfunction getBordersSize(styles) {\n  var positions = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    positions[_i - 1] = arguments[_i];\n  }\n\n  return positions.reduce(function (size, position) {\n    var value = styles['border-' + position + '-width'];\n    return size + toFloat(value);\n  }, 0);\n}\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\n\n\nfunction getPaddings(styles) {\n  var positions = ['top', 'right', 'bottom', 'left'];\n  var paddings = {};\n\n  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\n    var position = positions_1[_i];\n    var value = styles['padding-' + position];\n    paddings[position] = toFloat(value);\n  }\n\n  return paddings;\n}\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getSVGContentRect(target) {\n  var bbox = target.getBBox();\n  return createRectInit(0, 0, bbox.width, bbox.height);\n}\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getHTMLElementContentRect(target) {\n  // Client width & height properties can't be\n  // used exclusively as they provide rounded values.\n  var clientWidth = target.clientWidth,\n      clientHeight = target.clientHeight; // By this condition we can catch all non-replaced inline, hidden and\n  // detached elements. Though elements with width & height properties less\n  // than 0.5 will be discarded as well.\n  //\n  // Without it we would need to implement separate methods for each of\n  // those cases and it's not possible to perform a precise and performance\n  // effective test for hidden elements. E.g. even jQuery's ':visible' filter\n  // gives wrong results for elements with width & height less than 0.5.\n\n  if (!clientWidth && !clientHeight) {\n    return emptyRect;\n  }\n\n  var styles = getWindowOf(target).getComputedStyle(target);\n  var paddings = getPaddings(styles);\n  var horizPad = paddings.left + paddings.right;\n  var vertPad = paddings.top + paddings.bottom; // Computed styles of width & height are being used because they are the\n  // only dimensions available to JS that contain non-rounded values. It could\n  // be possible to utilize the getBoundingClientRect if only it's data wasn't\n  // affected by CSS transformations let alone paddings, borders and scroll bars.\n\n  var width = toFloat(styles.width),\n      height = toFloat(styles.height); // Width & height include paddings and borders when the 'border-box' box\n  // model is applied (except for IE).\n\n  if (styles.boxSizing === 'border-box') {\n    // Following conditions are required to handle Internet Explorer which\n    // doesn't include paddings and borders to computed CSS dimensions.\n    //\n    // We can say that if CSS dimensions + paddings are equal to the \"client\"\n    // properties then it's either IE, and thus we don't need to subtract\n    // anything, or an element merely doesn't have paddings/borders styles.\n    if (Math.round(width + horizPad) !== clientWidth) {\n      width -= getBordersSize(styles, 'left', 'right') + horizPad;\n    }\n\n    if (Math.round(height + vertPad) !== clientHeight) {\n      height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\n    }\n  } // Following steps can't be applied to the document's root element as its\n  // client[Width/Height] properties represent viewport area of the window.\n  // Besides, it's as well not necessary as the <html> itself neither has\n  // rendered scroll bars nor it can be clipped.\n\n\n  if (!isDocumentElement(target)) {\n    // In some browsers (only in Firefox, actually) CSS width & height\n    // include scroll bars size which can be removed at this step as scroll\n    // bars are the only difference between rounded dimensions + paddings\n    // and \"client\" properties, though that is not always true in Chrome.\n    var vertScrollbar = Math.round(width + horizPad) - clientWidth;\n    var horizScrollbar = Math.round(height + vertPad) - clientHeight; // Chrome has a rather weird rounding of \"client\" properties.\n    // E.g. for an element with content width of 314.2px it sometimes gives\n    // the client width of 315px and for the width of 314.7px it may give\n    // 314px. And it doesn't happen all the time. So just ignore this delta\n    // as a non-relevant.\n\n    if (Math.abs(vertScrollbar) !== 1) {\n      width -= vertScrollbar;\n    }\n\n    if (Math.abs(horizScrollbar) !== 1) {\n      height -= horizScrollbar;\n    }\n  }\n\n  return createRectInit(paddings.left, paddings.top, width, height);\n}\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\n\n\nvar isSVGGraphicsElement = function () {\n  // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\n  // interface.\n  if (typeof SVGGraphicsElement !== 'undefined') {\n    return function (target) {\n      return target instanceof getWindowOf(target).SVGGraphicsElement;\n    };\n  } // If it's so, then check that element is at least an instance of the\n  // SVGElement and that it has the \"getBBox\" method.\n  // eslint-disable-next-line no-extra-parens\n\n\n  return function (target) {\n    return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';\n  };\n}();\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\n\n\nfunction isDocumentElement(target) {\n  return target === getWindowOf(target).document.documentElement;\n}\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getContentRect(target) {\n  if (!isBrowser) {\n    return emptyRect;\n  }\n\n  if (isSVGGraphicsElement(target)) {\n    return getSVGContentRect(target);\n  }\n\n  return getHTMLElementContentRect(target);\n}\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\n\n\nfunction createReadOnlyRect(_a) {\n  var x = _a.x,\n      y = _a.y,\n      width = _a.width,\n      height = _a.height; // If DOMRectReadOnly is available use it as a prototype for the rectangle.\n\n  var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\n  var rect = Object.create(Constr.prototype); // Rectangle's properties are not writable and non-enumerable.\n\n  defineConfigurable(rect, {\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    top: y,\n    right: x + width,\n    bottom: height + y,\n    left: x\n  });\n  return rect;\n}\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction createRectInit(x, y, width, height) {\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n}\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\n\n\nvar ResizeObservation =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an instance of ResizeObservation.\r\n   *\r\n   * @param {Element} target - Element to be observed.\r\n   */\n  function ResizeObservation(target) {\n    /**\r\n     * Broadcasted width of content rectangle.\r\n     *\r\n     * @type {number}\r\n     */\n    this.broadcastWidth = 0;\n    /**\r\n     * Broadcasted height of content rectangle.\r\n     *\r\n     * @type {number}\r\n     */\n\n    this.broadcastHeight = 0;\n    /**\r\n     * Reference to the last observed content rectangle.\r\n     *\r\n     * @private {DOMRectInit}\r\n     */\n\n    this.contentRect_ = createRectInit(0, 0, 0, 0);\n    this.target = target;\n  }\n  /**\r\n   * Updates content rectangle and tells whether it's width or height properties\r\n   * have changed since the last broadcast.\r\n   *\r\n   * @returns {boolean}\r\n   */\n\n\n  ResizeObservation.prototype.isActive = function () {\n    var rect = getContentRect(this.target);\n    this.contentRect_ = rect;\n    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;\n  };\n  /**\r\n   * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n   * from the corresponding properties of the last observed content rectangle.\r\n   *\r\n   * @returns {DOMRectInit} Last observed content rectangle.\r\n   */\n\n\n  ResizeObservation.prototype.broadcastRect = function () {\n    var rect = this.contentRect_;\n    this.broadcastWidth = rect.width;\n    this.broadcastHeight = rect.height;\n    return rect;\n  };\n\n  return ResizeObservation;\n}();\n\nvar ResizeObserverEntry =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an instance of ResizeObserverEntry.\r\n   *\r\n   * @param {Element} target - Element that is being observed.\r\n   * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n   */\n  function ResizeObserverEntry(target, rectInit) {\n    var contentRect = createReadOnlyRect(rectInit); // According to the specification following properties are not writable\n    // and are also not enumerable in the native implementation.\n    //\n    // Property accessors are not being used as they'd require to define a\n    // private WeakMap storage which may cause memory leaks in browsers that\n    // don't support this type of collections.\n\n    defineConfigurable(this, {\n      target: target,\n      contentRect: contentRect\n    });\n  }\n\n  return ResizeObserverEntry;\n}();\n\nvar ResizeObserverSPI =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of ResizeObserver.\r\n   *\r\n   * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n   *      when one of the observed elements changes it's content dimensions.\r\n   * @param {ResizeObserverController} controller - Controller instance which\r\n   *      is responsible for the updates of observer.\r\n   * @param {ResizeObserver} callbackCtx - Reference to the public\r\n   *      ResizeObserver instance which will be passed to callback function.\r\n   */\n  function ResizeObserverSPI(callback, controller, callbackCtx) {\n    /**\r\n     * Collection of resize observations that have detected changes in dimensions\r\n     * of elements.\r\n     *\r\n     * @private {Array<ResizeObservation>}\r\n     */\n    this.activeObservations_ = [];\n    /**\r\n     * Registry of the ResizeObservation instances.\r\n     *\r\n     * @private {Map<Element, ResizeObservation>}\r\n     */\n\n    this.observations_ = new MapShim();\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('The callback provided as parameter 1 is not a function.');\n    }\n\n    this.callback_ = callback;\n    this.controller_ = controller;\n    this.callbackCtx_ = callbackCtx;\n  }\n  /**\r\n   * Starts observing provided element.\r\n   *\r\n   * @param {Element} target - Element to be observed.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.observe = function (target) {\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    } // Do nothing if current environment doesn't have the Element interface.\n\n\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n      return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n      throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_; // Do nothing if element is already being observed.\n\n    if (observations.has(target)) {\n      return;\n    }\n\n    observations.set(target, new ResizeObservation(target));\n    this.controller_.addObserver(this); // Force the update of observations.\n\n    this.controller_.refresh();\n  };\n  /**\r\n   * Stops observing provided element.\r\n   *\r\n   * @param {Element} target - Element to stop observing.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.unobserve = function (target) {\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    } // Do nothing if current environment doesn't have the Element interface.\n\n\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n      return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n      throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_; // Do nothing if element is not being observed.\n\n    if (!observations.has(target)) {\n      return;\n    }\n\n    observations.delete(target);\n\n    if (!observations.size) {\n      this.controller_.removeObserver(this);\n    }\n  };\n  /**\r\n   * Stops observing all elements.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.disconnect = function () {\n    this.clearActive();\n    this.observations_.clear();\n    this.controller_.removeObserver(this);\n  };\n  /**\r\n   * Collects observation instances the associated element of which has changed\r\n   * it's content rectangle.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.gatherActive = function () {\n    var _this = this;\n\n    this.clearActive();\n    this.observations_.forEach(function (observation) {\n      if (observation.isActive()) {\n        _this.activeObservations_.push(observation);\n      }\n    });\n  };\n  /**\r\n   * Invokes initial callback function with a list of ResizeObserverEntry\r\n   * instances collected from active resize observations.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.broadcastActive = function () {\n    // Do nothing if observer doesn't have active observations.\n    if (!this.hasActive()) {\n      return;\n    }\n\n    var ctx = this.callbackCtx_; // Create ResizeObserverEntry instance for every active observation.\n\n    var entries = this.activeObservations_.map(function (observation) {\n      return new ResizeObserverEntry(observation.target, observation.broadcastRect());\n    });\n    this.callback_.call(ctx, entries, ctx);\n    this.clearActive();\n  };\n  /**\r\n   * Clears the collection of active observations.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.clearActive = function () {\n    this.activeObservations_.splice(0);\n  };\n  /**\r\n   * Tells whether observer has active observations.\r\n   *\r\n   * @returns {boolean}\r\n   */\n\n\n  ResizeObserverSPI.prototype.hasActive = function () {\n    return this.activeObservations_.length > 0;\n  };\n\n  return ResizeObserverSPI;\n}(); // Registry of internal observers. If WeakMap is not available use current shim\n// for the Map collection as it has all required methods and because WeakMap\n// can't be fully polyfilled anyway.\n\n\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\n\nvar ResizeObserver =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of ResizeObserver.\r\n   *\r\n   * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n   *      dimensions of the observed elements change.\r\n   */\n  function ResizeObserver(callback) {\n    if (!(this instanceof ResizeObserver)) {\n      throw new TypeError('Cannot call a class as a function.');\n    }\n\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    }\n\n    var controller = ResizeObserverController.getInstance();\n    var observer = new ResizeObserverSPI(callback, controller, this);\n    observers.set(this, observer);\n  }\n\n  return ResizeObserver;\n}(); // Expose public methods of ResizeObserver.\n\n\n['observe', 'unobserve', 'disconnect'].forEach(function (method) {\n  ResizeObserver.prototype[method] = function () {\n    var _a;\n\n    return (_a = observers.get(this))[method].apply(_a, arguments);\n  };\n});\n\nvar index = function () {\n  // Export existing implementation if available.\n  if (typeof global$1.ResizeObserver !== 'undefined') {\n    return global$1.ResizeObserver;\n  }\n\n  return ResizeObserver;\n}();\n\nexport default index;"],"sourceRoot":""}